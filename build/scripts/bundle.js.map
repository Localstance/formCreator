{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","bundle.js","src/scripts/app.js","src/scripts/controller/App.js","src/scripts/modules/FormCreator.js","src/scripts/modules/FormGenerator.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_interopRequireDefault","obj","__esModule","default","_App","_App2","init","./controller/App","2","Object","defineProperty","value","_FormGenerator","_FormGenerator2","_FormCreator","_FormCreator2","App","generateBtn","addEventListener","formConfig","generateJSON","drawGeneratedJSON","drawForm","outputContainer","document","querySelector","generatedFormContainer","generatedFormTitle","object","innerHTML","JSON","stringify","generatedForm","create","classList","remove","appendChild","drawJSON","./../modules/FormCreator","./../modules/FormGenerator","3","FormCreator","containerElement","createElement","type","className","name","setAttribute","title","elements","forEach","item","id","label","labelElement","labelClassName","innerText","element","tagName","placeholder","textContent","4","FormGenerator","formNode","formElements","formLabels","generateGuid","part","p","Math","random","toString","substr","buildJSON","elms","formId","creationDate","Date","toISOString","elmObj","toLowerCase","getAttribute","push","generate","formClass","Array","from","children","querySelectorAll"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _App = require('./controller/App');\n\nvar _App2 = _interopRequireDefault(_App);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_App2.default.init();\n\n},{\"./controller/App\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FormGenerator = require('./../modules/FormGenerator');\n\nvar _FormGenerator2 = _interopRequireDefault(_FormGenerator);\n\nvar _FormCreator = require('./../modules/FormCreator');\n\nvar _FormCreator2 = _interopRequireDefault(_FormCreator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\r\n * @description\r\n * App-controller. It have main init method that initialize listeners to the application.\r\n * Also it have two additional public methods - drawForm from config-json and drawGeneratedJSON (from initial markup)\r\n * @type {{init, drawJSON, drawForm}}\r\n */\nvar App = function () {\n  var outputContainer = document.querySelector('.output__container');\n  var generatedFormContainer = document.querySelector('.generated-form__form');\n  var generatedFormTitle = document.querySelector('.generated-form .output__title');\n  var generateBtn = document.querySelector('.controls__generate');\n  var formConfig = {};\n\n  /**\r\n   * @description\r\n   * {Public} - This method gets generated json file and show it on UI (output container)\r\n   * @param object {Object} - JSON-config file\r\n   */\n  var drawGeneratedJSON = function drawGeneratedJSON(object) {\n    outputContainer.innerHTML = JSON.stringify(object);\n  };\n\n  /**\r\n   * @description\r\n   * {Public} - This method gets json-config and pass it to FormCreator module that returns generated HTML-form element\r\n   * Then it renders form on UI in predefined container.\r\n   * @param formConfig\r\n   */\n  var drawForm = function drawForm(formConfig) {\n    var generatedForm = _FormCreator2.default.create(formConfig);\n    generatedFormContainer.innerHTML = '';\n    generatedFormTitle.classList.remove('hidden');\n    generatedFormContainer.appendChild(generatedForm);\n  };\n\n  /**\r\n   * @description\r\n   * {Public} - Entry point of application. It adds listener on generate-button and calls FormGenerator module to create\r\n   * config file from provided form (by passing className)\r\n   */\n  function init() {\n    generateBtn.addEventListener('click', function () {\n      formConfig = _FormGenerator2.default.generateJSON('.login__form');\n      drawGeneratedJSON(formConfig);\n      drawForm(formConfig);\n    });\n  }\n\n  return {\n    init: init,\n    drawJSON: drawGeneratedJSON,\n    drawForm: drawForm\n  };\n}();\n\nexports.default = App;\n\n},{\"./../modules/FormCreator\":3,\"./../modules/FormGenerator\":4}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @description\r\n * FormCreator module that have one main method - create DOM element from the provided form-config JSON\r\n * @type {{create}}\r\n */\nvar FormCreator = function () {\n  /**\r\n   * @description\r\n   * {Public} - It takes form-config and generate node-element according to config.\r\n   * @param formConfig {Object} - form-config JSON\r\n   * @returns {Object} - DOM form-node\r\n   */\n  var create = function create(formConfig) {\n    var containerElement = document.createElement(formConfig.type);\n    containerElement.className = formConfig.name;\n    containerElement.setAttribute('title', formConfig.title);\n\n    formConfig.elements.forEach(function (item) {\n      item.id += '-generated';\n\n      if (item.label) {\n        var labelElement = document.createElement('label');\n        labelElement.setAttribute('for', item.id);\n        labelElement.className = item.labelClassName;\n        labelElement.innerText = item.label;\n        containerElement.appendChild(labelElement);\n      }\n\n      var element = document.createElement(item.tagName);\n      element.className = item.className;\n      element.setAttribute('id', item.id);\n      element.setAttribute('type', item.type);\n      element.setAttribute('value', item.value);\n      element.setAttribute('placeholder', item.placeholder);\n      element.textContent = item.textContent || '';\n\n      containerElement.appendChild(element);\n    });\n    return containerElement;\n  };\n\n  return {\n    create: create\n  };\n}();\n\nexports.default = FormCreator;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @description\r\n * FormGenerator module. Have one main public method 'generateJSON' that returns json object from provided html-form.\r\n * @type {{generateJSON}}\r\n */\nvar FormGenerator = function () {\n  var formNode = void 0;\n  var formElements = [];\n  var formLabels = [];\n\n  /**\r\n   * @description\r\n   * {Private} - Helper function for generating unique GUID.\r\n   * @returns {String} - guid\r\n   */\n  var generateGuid = function generateGuid() {\n    var part = function part(i) {\n      var p = (Math.random().toString(16) + '000000000').substr(2, 8);\n      return i ? '-' + p.substr(0, 4) + '-' + p.substr(4, 4) : p;\n    };\n    return part() + part(true) + part(true) + part();\n  };\n\n  /**\r\n   * @description\r\n   * {Private} - Main engine of module - it creates JSON-config from the provided elements.\r\n   * @param elms {Array} - form elements\r\n   * @returns {Object} - from-config\r\n   */\n  var buildJSON = function buildJSON(elms) {\n    var formConfig = {};\n    formConfig.formId = generateGuid();\n    formConfig.elements = [];\n    formConfig.creationDate = new Date().toISOString();\n    formConfig.name = formNode.className;\n    formConfig.type = 'form';\n    formConfig.title = formNode.title;\n\n    elms.forEach(function (item) {\n      if (item.tagName !== 'LABEL') {\n        (function () {\n          var elmObj = {\n            tagName: item.tagName.toLowerCase(),\n            id: item.id || '',\n            type: item.type || 'text',\n            className: item.className || '',\n            value: item.value || '',\n            placeholder: item.placeholder || ''\n          };\n\n          formLabels.forEach(function (label) {\n            if (label.getAttribute('for') === item.id) {\n              elmObj.label = label.textContent;\n              elmObj.labelClassName = label.className;\n            }\n          });\n\n          if (item.tagName === 'BUTTON') {\n            elmObj.textContent = item.textContent;\n          }\n\n          formConfig.elements.push(elmObj);\n        })();\n      }\n    });\n    return formConfig;\n  };\n\n  /**\r\n   * @description\r\n   * {Public} - function that find provided form element and returns generated JSON form-config\r\n   * @param formClass {String} - form class name\r\n   * @returns {Object} - form-config\r\n   */\n  var generate = function generate(formClass) {\n    formNode = document.querySelector(formClass);\n    formElements = Array.from(formNode.children);\n    formLabels = Array.from(document.querySelectorAll(formClass + ' label'));\n    return buildJSON(formElements);\n  };\n\n  return {\n    generateJSON: generate\n  };\n}();\n\nexports.default = FormGenerator;\n\n},{}]},{},[1])\n\n","import App from './controller/App';\r\n\r\nApp.init();\r\n","import FormGenerator from './../modules/FormGenerator';\r\nimport FormCreator from './../modules/FormCreator';\r\n\r\n\r\n/**\r\n * @description\r\n * App-controller. It have main init method that initialize listeners to the application.\r\n * Also it have two additional public methods - drawForm from config-json and drawGeneratedJSON (from initial markup)\r\n * @type {{init, drawJSON, drawForm}}\r\n */\r\nconst App = (() => {\r\n  const outputContainer = document.querySelector('.output__container');\r\n  const generatedFormContainer = document.querySelector('.generated-form__form')\r\n  const generatedFormTitle = document.querySelector('.generated-form .output__title');\r\n  const generateBtn = document.querySelector('.controls__generate');\r\n  let formConfig = {};\r\n\r\n\r\n  /**\r\n   * @description\r\n   * {Public} - This method gets generated json file and show it on UI (output container)\r\n   * @param object {Object} - JSON-config file\r\n   */\r\n  const drawGeneratedJSON = object => {\r\n    outputContainer.innerHTML = JSON.stringify(object);\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * {Public} - This method gets json-config and pass it to FormCreator module that returns generated HTML-form element\r\n   * Then it renders form on UI in predefined container.\r\n   * @param formConfig\r\n   */\r\n  const drawForm = formConfig => {\r\n    const generatedForm = FormCreator.create(formConfig);\r\n    generatedFormContainer.innerHTML = '';\r\n    generatedFormTitle.classList.remove('hidden');\r\n    generatedFormContainer.appendChild(generatedForm);\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * {Public} - Entry point of application. It adds listener on generate-button and calls FormGenerator module to create\r\n   * config file from provided form (by passing className)\r\n   */\r\n  function init() {\r\n    generateBtn.addEventListener('click', () => {\r\n      formConfig = FormGenerator.generateJSON('.login__form');\r\n      drawGeneratedJSON(formConfig);\r\n      drawForm(formConfig);\r\n    });\r\n  }\r\n\r\n  return {\r\n    init: init,\r\n    drawJSON: drawGeneratedJSON,\r\n    drawForm: drawForm\r\n  };\r\n})();\r\n\r\nexport default App;\r\n","/**\r\n * @description\r\n * FormCreator module that have one main method - create DOM element from the provided form-config JSON\r\n * @type {{create}}\r\n */\r\nconst FormCreator = (() => {\r\n  /**\r\n   * @description\r\n   * {Public} - It takes form-config and generate node-element according to config.\r\n   * @param formConfig {Object} - form-config JSON\r\n   * @returns {Object} - DOM form-node\r\n   */\r\n  const create = formConfig => {\r\n    const containerElement = document.createElement(formConfig.type);\r\n    containerElement.className = formConfig.name;\r\n    containerElement.setAttribute('title', formConfig.title);\r\n\r\n    formConfig.elements.forEach((item) => {\r\n      item.id += '-generated';\r\n\r\n      if (item.label) {\r\n        const labelElement = document.createElement('label');\r\n        labelElement.setAttribute('for', item.id);\r\n        labelElement.className = item.labelClassName;\r\n        labelElement.innerText = item.label;\r\n        containerElement.appendChild(labelElement);\r\n      }\r\n\r\n      const element = document.createElement(item.tagName);\r\n      element.className = item.className;\r\n      element.setAttribute('id', item.id);\r\n      element.setAttribute('type', item.type);\r\n      element.setAttribute('value', item.value);\r\n      element.setAttribute('placeholder', item.placeholder);\r\n      element.textContent = item.textContent || '';\r\n\r\n      containerElement.appendChild(element);\r\n    });\r\n    return containerElement;\r\n  };\r\n\r\n  return {\r\n    create: create\r\n  };\r\n})();\r\n\r\nexport default FormCreator;\r\n","/**\r\n * @description\r\n * FormGenerator module. Have one main public method 'generateJSON' that returns json object from provided html-form.\r\n * @type {{generateJSON}}\r\n */\r\nconst FormGenerator = (() => {\r\n  let formNode;\r\n  let formElements = [];\r\n  let formLabels = [];\r\n\r\n\r\n  /**\r\n   * @description\r\n   * {Private} - Helper function for generating unique GUID.\r\n   * @returns {String} - guid\r\n   */\r\n  const generateGuid = () => {\r\n    const part = i => {\r\n      const p = (Math.random().toString(16) + '000000000').substr(2, 8);\r\n      return i ? '-' + p.substr(0, 4) + '-' + p.substr(4, 4) : p;\r\n    };\r\n    return part() + part(true) + part(true) + part();\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * {Private} - Main engine of module - it creates JSON-config from the provided elements.\r\n   * @param elms {Array} - form elements\r\n   * @returns {Object} - from-config\r\n   */\r\n  const buildJSON = elms => {\r\n    const formConfig = {};\r\n    formConfig.formId = generateGuid();\r\n    formConfig.elements = [];\r\n    formConfig.creationDate = new Date().toISOString();\r\n    formConfig.name = formNode.className;\r\n    formConfig.type = 'form';\r\n    formConfig.title = formNode.title;\r\n\r\n    elms.forEach((item) => {\r\n      if (item.tagName !== 'LABEL') {\r\n        const elmObj = {\r\n          tagName: item.tagName.toLowerCase(),\r\n          id: item.id || '',\r\n          type: item.type || 'text',\r\n          className: item.className || '',\r\n          value: item.value || '',\r\n          placeholder: item.placeholder || ''\r\n        };\r\n\r\n        formLabels.forEach((label) => {\r\n          if (label.getAttribute('for') === item.id) {\r\n            elmObj.label = label.textContent;\r\n            elmObj.labelClassName = label.className;\r\n          }\r\n        });\r\n\r\n        if (item.tagName === 'BUTTON') {\r\n          elmObj.textContent = item.textContent;\r\n        }\r\n\r\n        formConfig.elements.push(elmObj);\r\n      }\r\n    });\r\n    return formConfig;\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * {Public} - function that find provided form element and returns generated JSON form-config\r\n   * @param formClass {String} - form class name\r\n   * @returns {Object} - form-config\r\n   */\r\n  const generate = formClass => {\r\n    formNode = document.querySelector(formClass);\r\n    formElements = Array.from(formNode.children);\r\n    formLabels = Array.from(document.querySelectorAll(formClass + ' label'));\r\n    return buildJSON(formElements);\r\n  };\r\n\r\n  return {\r\n    generateJSON: generate\r\n  };\r\n})();\r\n\r\nexport default FormGenerator;\r\n"],"sourceRoot":"/source/"}